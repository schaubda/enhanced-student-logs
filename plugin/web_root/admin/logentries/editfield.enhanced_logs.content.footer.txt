~[x:insertfile;/admin/logentries/eslogs/option_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/admin_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/teacher_templates.txt]

<script type="text/javascript" src="/scripts/timeentry_widget.js"></script>

<script>
    const NUMERIC_OPERATORS =
              {
                  'greater':        'Greater than',
                  'greaterorequal': 'Greater than or equal to',
                  'less':           'Less than',
                  'lessorequal':    'Less than or equal to',
                  'equal':          'Equal to',
                  'notequal':       'Not equal to',
                  'between':        'Between',
                  'notbetween':     'Not between'
              };

    const DATE_TIME_OPERATORS =
              {
                  'greater':        'After',
                  'greaterorequal': 'On or after',
                  'less':           'Before',
                  'lessorequal':    'On or before',
                  'equal':          'On',
                  'notequal':       'Not on',
                  'between':        'Between',
                  'notbetween':     'Not between'
              };

    function setVisible(jQueryElement, visible)
    {
        $j(jQueryElement)
            .each(function ()
                  {
                      if (visible)
                      {
                          if ($j(this).hasClass('hide'))
                          {
                              $j(this).removeClass('hide');
                          }

                          $j(this).prop('disabled', false);
                      }
                      else
                      {
                          if (!$j(this).hasClass('hide'))
                          {
                              $j(this).addClass('hide');
                          }

                          $j(this).prop('disabled', true);
                      }
                  });
    }

    function copyTimeValue(target, source)
    {
        if (target.attr('id').includes('Store'))
        {
            target.val(convertToSeconds(source.val()));
        }
        else
        {
            target.val(convertTo12hrTime(source.val()));
        }
    }

    // Convert Seconds (integer) to Time (12 hr AM/PM) -- no seconds
    // Adapted from Peter Nethercott's Log Entry Management Plugin
    function convertTo12hrTime(seconds)
    {
        let hours = Math.floor(seconds / 3600);
        let minutes = Math.floor((seconds - (hours * 3600)) / 60);
        let meridiem = 'AM';

        if (hours * 60 * 60 >= 43200)
        {
            meridiem = 'PM';

            if (hours !== 12)
            {
                hours -= 12;
            }
        }

        let strHours = hours < 10 ? `0${hours}` : `${hours}`;
        let strMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;

        return `${strHours}:${strMinutes} ${meridiem}`;
    }

    // Convert Time (12 hr AM/PM) to Seconds (integer)
    // Adapted from Peter Nethercott's Log Entry Management Plugin
    function convertToSeconds(time12Hrs)
    {
        let hrs = parseInt(time12Hrs.substring(0, 2), 10);
        let min = parseInt(time12Hrs.substring(3, 5), 10);

        return hrs * 3600 + min * 60 +
               ((time12Hrs.substring(6) === "PM" && hrs !== 12) ? 43200 : 0);
    }

    function collapsibleClick()
    {
        let checkbox = $j(this).find('input[type="checkbox"]');

        if ($j(this).hasClass('expanded'))
        {
            checkbox.prop('checked', false);
        }
        else
        {
            checkbox.prop('checked', true);
        }
    }

    function matchAdminCheckboxChange()
    {
        if ($j(this).is(':checked'))
        {
            setVisible($j(this).parent().parent().nextAll(), false);
        }
        else
        {
            setVisible($j(this).parent().parent().nextAll(), true);
        }
    }

    function setDefaultFields(portal)
    {
        let prefix = '#' + portal;

        switch ($j(prefix + 'DefType').val())
        {
            case 'none':
                setVisible($j(prefix + 'DefStaticVal'), false);
                setVisible($j(prefix + 'DefDynamicVal'), false);
                break;

            case 'static':
                setVisible($j(prefix + 'DefStaticVal'), true);
                setVisible($j(prefix + 'DefDynamicVal'), false);
                break;

            case 'dynamic':
                setVisible($j(prefix + 'DefStaticVal'), false);
                setVisible($j(prefix + 'DefDynamicVal'), true);
                break;
        }
    }

    function defaultTypeChange()
    {
        let defaultType = $j(this);
        let portal = defaultType.data('portal');

        setDefaultFields(portal);
    }

    function setValidationInputsType(portal, type)
    {
        let prefix = '#' + portal;

        if (type === 'Date')
        {
            $j(prefix + 'ValidDateVal1').next().removeClass('hide');
            $j(prefix + 'ValidDateVal2').next().removeClass('hide');
        }
        else
        {
            $j(prefix + 'ValidDateVal1').next().addClass('hide');
            $j(prefix + 'ValidDateVal2').next().addClass('hide');
        }

        if (type !== 'None')
        {
            setVisible($j('.adminValidVal'), false);
            setVisible($j(prefix + 'Valid' + type + 'Val1'), true);
            setVisible($j(prefix + 'Valid' + type + 'Val2'), true);
        }
    }

    function setValidationValue2Visible(portal)
    {
        let prefix = '#' + portal;
        let operator = $j(prefix + 'ValidOperator').val();

        if (operator === 'greater' ||
            operator === 'greaterorequal' ||
            operator === 'less' ||
            operator === 'lessorequal' ||
            operator === 'equal' ||
            operator === 'notequal')
        {
            setVisible($j(prefix + 'ValidSpan2'), false);
        }
        else if (operator === 'between' ||
                 operator === 'notbetween')
        {
            setVisible($j(prefix + 'ValidSpan2'), true);
        }
    }

    function setValidationFields(portal)
    {
        let prefix = '#' + portal;
        let validationType = $j(prefix + 'ValidType').val();

        if (validationType === 'none')
        {
            setVisible($j(prefix + 'ValidSpan1'), false);
            setVisible($j(prefix + 'ValidSpan2'), false);
            setValidationInputsType(portal, 'None');
        }
        else
        {
            setVisible($j(prefix + 'ValidSpan1'), true);
            setValidationValue2Visible(portal);

            switch (validationType)
            {
                case 'numeric':
                    setValidationInputsType(portal, 'Number');
                    break;

                case 'date':
                    setValidationInputsType(portal, 'Date');
                    break;

                case 'time':
                    setValidationInputsType(portal, 'Time');
                    break;

                case 'email':
                case 'phone':
                case 'regex':
                    setValidationInputsType(portal, 'Text');
                    break;
            }
        }
    }

    function validationTypeChange()
    {
        let validationType = $j(this);
        let portal = validationType.data('portal');

        setValidationFields(portal);
    }

    function validationOperatorChange()
    {
        let operator = $j(this);
        let portal = operator.data('portal');

        setValidationValue2Visible(portal);
    }

    function validationTimeValueChange()
    {
        let timeValue = $j(this);
        let target = timeValue.parent().next();

        copyTimeValue(target, timeValue);
    }

    function setupEventHandlers()
    {
        $j('.toggle').on('click', collapsibleClick);
        $j('.matchAdmin').on('change', matchAdminCheckboxChange);
        $j('.defaultType').on('change', defaultTypeChange);
        $j('.validationType').on('change', validationTypeChange);
        $j('.validationOperator').on('change', validationOperatorChange);
        $j('.validTimeVal').on('change', validationTimeValueChange);
    }

    function addCustomPageContent()
    {
        let adminContent = $j('#adminTemplate').html();
        let teacherContent = $j('#teacherTemplate').html();
        let target = $j('.box-round table');

        target.wrap('<div id="adminOptions" class="box-round"></div>');

        let adminOptions = $j('#adminOptions');

        adminOptions.prepend('<h2>Admin Portal</h2>');
        adminOptions.append(adminContent);
        adminOptions.after(teacherContent);
    }

    function setupFields()
    {
        $j('.toggle')
            .each(function ()
                  {
                      let checkbox = $j(this).find('input[type="checkbox"]');

                      if (checkbox.is(':checked'))
                      {
                          $j(this).removeClass('collapsed')
                                  .addClass('expanded');
                          $j(this).attr('aria-expanded', 'true');
                          setVisible($j(this).next(), true);
                      }
                  });

        setDefaultFields('admin');
        setDefaultFields('teacher');
        setValidationFields('admin');
    }

    (function ()
    {
        addCustomPageContent();
        setupFields();
        setupEventHandlers();
    })();

    $j(function ()
       {
           $j('.validTimeVal')
               .each(function ()
                     {
                         let timeValue = $j(this);
                         let source = timeValue.parent().next();

                         console.log('timeValue: ', timeValue);
                         console.log('source: ', source);

                         copyTimeValue(source, timeValue);
                     });
       });
</script>