~[x:insertfile;/admin/logentries/eslogs/option_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/admin_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/teacher_templates.txt]

<script>
    function backupTeacherDefaultVals()
    {
        $j('#backupTeacherDefaultType').val($j('#teacherDefaultType').val());
        $j('#backupTeacherStaticDefaultValue').val($j('#teacherStaticDefaultValue').val());
        $j('#backupTeacherDynamicDefaultValue').val($j('#teacherDynamicDefaultValue').val());
    }

    function restoreTeacherDefaultVals()
    {
        $j('#teacherDefaultType').val($j('#backupTeacherDefaultType').val());
        swapTeacherDefaultType();
        $j('#teacherStaticDefaultValue').val($j('#backupTeacherStaticDefaultValue').val());
        $j('#teacherDynamicDefaultValue').val($j('#backupTeacherDynamicDefaultValue').val());
    }

    function clearTeacherDefaultVals()
    {
        $j('#teacherDefaultType').val('none');
        swapTeacherDefaultType();
    }

    function collapsibleClick()
    {
        let checkbox = $j(this).find('input[type="checkbox"]');

        if ($j(this).hasClass('expanded'))
        {
            checkbox.prop('checked', false);
        }
        else
        {
            checkbox.prop('checked', true);
        }
    }

    function matchAdminCheckboxChange()
    {
        if ($j(this).is(':checked'))
        {
            $j(this).parent().parent().nextAll().addClass('hide');
        }
        else
        {
            $j(this).parent().parent().nextAll().removeClass('hide');
        }
    }

    function teacherDefaultTypeChange()
    {
        $j('#backupTeacherDefaultType').val($j('#teacherDefaultType').val());

        restoreTeacherDefaultVals();
    }

    function swapTeacherDefaultType()
    {
        switch ($j('#teacherDefaultType').val())
        {
            case 'none':
                $j('#teacherStaticDefaultValue').remove();
                $j('#teacherDynamicDefaultValue').remove();
                break;

            case 'static':
                $j('#teacherDynamicDefaultValue').remove();
                $j('#backupTeacherStaticDefaultValue')
                    .before($j('#teacherStaticDefaultTemplate').html());
                $j('#teacherStaticDefaultValue').on('change', teacherStaticDefaultChange);
                break;

            case 'dynamic':
                $j('#teacherStaticDefaultValue').remove();
                $j('#backupTeacherDynamicDefaultValue')
                    .before($j('#teacherDynamicDefaultTemplate').html());
                $j('#teacherDynamicDefaultValue').on('change', teacherDynamicDefaultChange);
                break;
        }
    }

    function teacherStaticDefaultChange()
    {
        $j('#backupTeacherStaticDefaultValue').val($j('#teacherStaticDefaultValue').val());
    }

    function teacherDynamicDefaultChange()
    {
        $j('#backupTeacherDynamicDefaultValue').val($j('#teacherDynamicDefaultValue').val());
    }

    function setupEventHandlers()
    {
        $j('.toggle').on('click', collapsibleClick);

        $j('.matchAdmin').on('change', matchAdminCheckboxChange);

        $j('#teacherDefaultType').on('change', teacherDefaultTypeChange);
        $j('#teacherStaticDefaultValue').on('change', teacherStaticDefaultChange);
        $j('#teacherDynamicDefaultValue').on('change', teacherDynamicDefaultChange);
    }

    (function ()
    {
        let adminContent = $j('#adminTemplate').html();
        let teacherContent = $j('#teacherTemplate').html();
        let target = $j('.box-round table');

        target.wrap('<div id="adminOptions" class="box-round"></div>');

        let adminOptions = $j('#adminOptions');

        adminOptions.prepend('<h2>Admin Portal</h2>');
        adminOptions.append(adminContent);
        adminOptions.after(teacherContent);

        // backupTeacherFormattingVals();
        // backupTeacherDefaultVals();

        // showOnPortalChange();
        // matchAdminFormattingChange();
        // matchAdminDefaultChange();

        setupEventHandlers();
    })();
</script>