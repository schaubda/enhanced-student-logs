~[x:insertfile;/admin/logentries/eslogs/option_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/admin_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/teacher_templates.txt]

<script>
    function setHide(jQueryElement, hide)
    {
        if (hide)
        {
            if (!jQueryElement.hasClass('hide'))
            {
                jQueryElement.addClass('hide');
            }

            jQueryElement.prop('disabled', true);
        }
        else
        {
            if (jQueryElement.hasClass('hide'))
            {
                jQueryElement.removeClass('hide');
            }

            jQueryElement.prop('disabled', false);
        }
    }

    function collapsibleClick()
    {
        let checkbox = $j(this).find('input[type="checkbox"]');

        if ($j(this).hasClass('expanded'))
        {
            checkbox.prop('checked', false);
        }
        else
        {
            checkbox.prop('checked', true);
        }
    }

    function matchAdminCheckboxChange()
    {
        if ($j(this).is(':checked'))
        {
            setHide($j(this).parent().parent().nextAll(), true);
        }
        else
        {
            setHide($j(this).parent().parent().nextAll(), false);
        }
    }

    function setDefaultFields(portal)
    {
        let prefix = '#' + portal;

        switch ($j(prefix + 'DefaultType').val())
        {
            case 'none':
                setHide($j(prefix + 'StaticDefaultValue'), true);
                setHide($j(prefix + 'DynamicDefaultValue'), true);
                break;

            case 'static':
                setHide($j(prefix + 'StaticDefaultValue'), false);
                setHide($j(prefix + 'DynamicDefaultValue'), true);
                break;

            case 'dynamic':
                setHide($j(prefix + 'StaticDefaultValue'), true);
                setHide($j(prefix + 'DynamicDefaultValue'), false);
                break;
        }
    }

    function defaultTypeChange()
    {
        let defaultType = $j(this);
        let portal = defaultType.data('portal');

        setDefaultFields(portal);
    }

    function setupEventHandlers()
    {
        $j('.toggle').on('click', collapsibleClick);
        $j('.matchAdmin').on('change', matchAdminCheckboxChange);
        $j('.defaultType').on('change', defaultTypeChange);
    }

    function addCustomPageContent()
    {
        let adminContent = $j('#adminTemplate').html();
        let teacherContent = $j('#teacherTemplate').html();
        let target = $j('.box-round table');

        target.wrap('<div id="adminOptions" class="box-round"></div>');

        let adminOptions = $j('#adminOptions');

        adminOptions.prepend('<h2>Admin Portal</h2>');
        adminOptions.append(adminContent);
        adminOptions.after(teacherContent);
    }

    function setupFields()
    {
        $j('.toggle')
            .each(function ()
                  {
                      let checkbox = $j(this).find('input[type="checkbox"]');

                      if (checkbox.is(':checked'))
                      {
                          $j(this).removeClass('collapsed')
                                  .addClass('expanded');
                          $j(this).attr('aria-expanded', 'true');
                          setHide($j(this).next(), false);
                      }
                  });

        setDefaultFields('admin');
        setDefaultFields('teacher');
    }

    (function ()
    {
        addCustomPageContent();
        setupFields();
        setupEventHandlers();
    })();
</script>