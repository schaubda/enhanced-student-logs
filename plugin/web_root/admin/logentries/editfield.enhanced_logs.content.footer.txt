~[x:insertfile;/admin/logentries/eslogs/option_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/admin_templates.txt]

~[x:insertfile;/admin/logentries/eslogs/teacher_templates.txt]

<script>
    function collapsibleClick()
    {
        let checkbox = $j(this).find('input[type="checkbox"]');

        if ($j(this).hasClass('expanded'))
        {
            checkbox.prop('checked', false);
        }
        else
        {
            checkbox.prop('checked', true);
        }
    }

    function matchAdminCheckboxChange()
    {
        if ($j(this).is(':checked'))
        {
            $j(this).parent().parent().nextAll().addClass('hide');
        }
        else
        {
            $j(this).parent().parent().nextAll().removeClass('hide');
        }
    }

    function setDefaultFields(portal)
    {
        let prefix = '#' + portal;

        switch ($j(prefix + 'DefaultType').val())
        {
            case 'none':
                $j(prefix + 'StaticDefaultValue').remove();
                $j(prefix + 'DynamicDefaultValue').remove();
                break;

            case 'static':
                $j(prefix + 'DynamicDefaultValue').remove();
                $j(prefix + 'BackupStaticDefaultValue')
                    .before($j(prefix + 'StaticDefaultTemplate').html());
                $j(prefix + 'StaticDefaultValue').on('change', defaultChange);
                break;

            case 'dynamic':
                $j(prefix + 'StaticDefaultValue').remove();
                $j(prefix + 'BackupDynamicDefaultValue')
                    .before($j(prefix + 'DynamicDefaultTemplate').html());
                $j(prefix + 'DynamicDefaultValue').on('change', defaultChange);
                break;
        }
    }

    function defaultTypeChange()
    {
        let defaultType = $j(this);
        let portal = defaultType.data('portal');

        setDefaultFields(portal);

        $j('#' + portal + 'StaticDefaultValue')
            .val($j('#' + portal + 'BackupStaticDefaultValue').val());

        $j('#' + portal + 'DynamicDefaultValue')
            .val($j('#' + portal + 'BackupDynamicDefaultValue').val());
    }

    function defaultChange()
    {
        let defaultInput = $j(this);
        let backup = defaultInput.next();

        backup.val(defaultInput.val());
    }

    function setupEventHandlers()
    {
        $j('.toggle').on('click', collapsibleClick);
        $j('.matchAdmin').on('change', matchAdminCheckboxChange);
        $j('.defaultType').on('change', defaultTypeChange);
        $j('.defaultVal').on('change', defaultChange);
    }

    function addCustomPageContent()
    {
        let adminContent = $j('#adminTemplate').html();
        let teacherContent = $j('#teacherTemplate').html();
        let target = $j('.box-round table');

        target.wrap('<div id="adminOptions" class="box-round"></div>');

        let adminOptions = $j('#adminOptions');

        adminOptions.prepend('<h2>Admin Portal</h2>');
        adminOptions.append(adminContent);
        adminOptions.after(teacherContent);
    }

    (function ()
    {
        addCustomPageContent();

        setDefaultFields('teacher');
        setDefaultFields('admin');

        setupEventHandlers();
    })();
</script>