<!--NoLink-->
<!--
    Title       : </teachers/studentpages/logentry.include_fields.content.footer.txt>
    Created By  : Peter Nethercott
    Date Created: 05/05/2017
    Last Updated: 08/02/2023

    06/08/2017 - PDN:
        Added Incident Type & Location -- if "not hidden" in Log Entry Setup
        Because logic was added for more incident fields, renamed this page fragment -- "incident_datetime" part became "include_fields"

    06/09/2017 - PDN: Made all Discipline Incident fields show/hide based on log type Discipline/Other
    06/15/2017 - PDN: Fixed bug that was not changing "for" attribute of label for Incident Date/Time (id="lm_...")
    06/29/2017 - PDN: Added the rest of the Incident fields to the page -- log entry fields whose names start with "discipline_incident"

    07/11/2017 - PDN: 
        Added logic to handle prefs set by admin indicating whether the "non-hidden" Incident fields should show on the Teacher Portal
        (Incident Date is ALWAYS shown for Discipline entries)

    07/11-18/2017 - PDN:
        Made the incident field value appear and process on the page with the correct input type -- e.g. input text, textarea, select, radio, etc., based on Log Entry Setup

    08/10/2017 - PDN:
        Cleaned up tlist_sql for entry fields definitions

    08/15/2017 - PDN:
        Adjusted log entry fields with type popup and radio so that if only one is provided (no comma-separate value), the one provided is used for both the value and text.
    
    08/30/2017 - PDN:
        Expanded list of fields allowed on PowerTeacher portal to include all but the "core" fields
        Because logic was added for the rest of the log entry fields, renamed this page fragment -- "incident_fields" part became "include_fields"
    
    09/01/2017 - PDN:
        Cleaned up logic around adding fields.
        Added the inclusion of a date picker for any field identified with a format of "date" -- which can be determined several ways:
            1. A Log Entry Field defined with a gen.value of "[short.date]"
            2. A Log Entry Field defined with a gen.valuet2 (Data for Popup or Radio buttons) of "00/00/00"
            3. Custom field (DB Extension) added via page fragment /wildcards/log_fields.<somename>.content.inputs.txt with the attribute format="date".

    10/10/2017 - PDN: Fixed convTime12ToSeconds() calculation (was wrong if time was between 12:00 PM and 12:59 PM

    10/05/2018 - PDN: Removed include of /scripts/jquery.timeentry_ps.js since it is already being included via /scripts/timeentry_widget.js.

    12/20/2018 - PDN: Fixed issue with Datepicker not being enabled for Incident Date

    11/20/2019 - PDN: Added try/catch block to catch instances where Log Entry Fields "Show Teachers" (TP_include_fields) preferences have not been defined.

    01/14/2020 - PDN: Cleaned up conditional checks for -100000 to NOT use string comparison.

    02/04/2020 - PDN: Modified most Incident Date checks to be for Discipline logs, only.

    01/19/2022 - PDN:
        Optimized the tlist_sql that was getting the Log Entry fields to retrieve only those marked to be included in the Teacher Portal.
        Before, all fields were retrieved in this query and narrowed to the appropriate ones afterward based on PREFS.TP_include_fields.
        However, some values that can be included in admin that don't work in TP or that were hidden were being retrieved as well, some which
        caused the query to error out.

    02/08/2022 - PDN: Modified Incident Date checks to account for international date format of DD/MM/YYYY

    08/02/2023 - PDN: Removed references like ":first" to use "first()" function, instead (due to updates in PS SIS)
-->
<script type="text/javascript" src="/scripts/timeentry_widget.js"></script>

<div id="divIncidentInfo" style="display:none;">
    Included Fields
    <table id="tblIncidentInfo">
        <tbody>
            
            <tr title="Incident Date & Time">
                <td class="bold"><label for="lm_discipline_incidentdate">Incident Date</label></td>
                <td>
                    <input type="text"
                        id="lm_discipline_incidentdate"
                        name="[LOG]discipline_incidentdate"
                        class="psDateWidget psSpecialValidate"
                        data-specialfunction="checkIncidentDate"
                        value="~[short.date]"
                        size="12"> <!-- onblur="checkIncidentDate($j(this))"> -->
                    <label for="lm_discipline_incidenttime_disp">Time</label>
                    <input type="text"
                        id="lm_discipline_incidenttime_disp"
                        class="timeEntry15 timeEntry15NowOnClick"
                        value="~[time]"
                        size="8"
                        onblur="copyTimeToBound($j(this))">
                </td>
            </tr>
        </tbody>
    </table>
    <input type="hidden" id="discipline_incidenttime" name="[log.U_LogMgmt]discipline_incidenttime" value="">
    <textarea id="pref-TP_include_fields" cols="80" rows="10">~[displaypref:TP_include_fields]</textarea>
</div>
<div id="datefield">
    <input type="text" id="df" class="psDateWidget" name="df" value="">
</div>

<!-- this code is in separate script tags in case it has an error... the other script will still execute -->
<script>
"use strict";

var prefTPIncludeField = [];

/* 01/19/2022 - PDN: Optimized this query to get only those to be shown in the Teacher Portal. */
var logflds = [
        ~[tlist_sql;
            with tp_include as (
                select
                    regexp_substr(str, chr(91)||'^},{'||chr(93)||'+', 1, level ) stt
                from
                    (select prefs.value str from prefs where prefs.name = 'TP_include_fields')
                connect by
                    level <= length ( str ) - length ( replace ( str, '},{' ) ) + 1
            ),
            tp_include_pivot as (
                select
                    case
                        when MOD(rownum,2) = 0 then rownum - 1
                        else rownum
                    end id,
                    to_char(replace(stt,'"','')) val
                from
                    tp_include
                where
                    to_char(stt) like '%"%'
            )

            select
                lower(gen.name) id,
                replace(substr(to_char(gen.custom),instr(to_char(gen.custom),chr(1)||'FieldLabel')+12),chr(1),'') label,
                nvl(gen.sortorder,999999),
                lower(nvl(gen.value2,'edit')) fldtype,
                nvl(gen.valueli,0),
                nvl(valueli2,0),
                to_char(gen.valuet2) valuet2
            from
                gen
                join (
                    select
                        substr(ip_fld.val,4) fld,
                        substr(ip_include.val,9) include
                    from
                        tp_include_pivot ip_fld
                        join tp_include_pivot ip_include
                            on ip_include.id = ip_fld.id
                            and ip_include.val like 'checked%'
                    where
                        ip_fld.val like 'id%'
                ) showTP
                    on showTP.fld = lower(gen.name)
                    and showTP.include = 'true'
            where
                gen.cat = 'logentrycodes'
            order by
                gen.sortorder;
                nonemessage=null;]
        { id:"~(id;t)", label:"~(label;t)", sortorder:~(sortorder,i), fldtype:"~(fldtype;t)", width:~(valueli,i), height:~(valueli2,i), valuet2:"~(valuet2;js)" },[/tlist_sql]
        {}
     ];

var included_fld = {}; // see .ready() event for populating

</script>

<script type="text/javascript">

var aDate = {}, eDate = {}, iDate = {}, dateActionTaken = "", dateEntry = "", dateIncident = "", today = "";
function checkIncidentDate(iDate) {
    var dformat = '~[dateformat]'.toUpperCase().split("/");
    
    var dsplit = iDate.val().split("/");
    var mm = (dformat[0] == "MM") ? dsplit[0] : dsplit[1];
    var dd = (dformat[1] == "DD") ? dsplit[1] : dsplit[0];
    var yyyy = dsplit[2];
    var dateIncident = new Date(mm+"/"+dd+"/"+yyyy);

    dsplit = jQuery('#entry_date').val().split("/");
    mm = (dformat[0] == "MM") ? dsplit[0] : dsplit[1];
    dd = (dformat[1] == "DD") ? dsplit[1] : dsplit[0];
    yyyy = dsplit[2];
    var dateEntry = new Date(mm+"/"+dd+"/"+yyyy);

    today = new Date();
    if(dateIncident > today) {
        return "Incident Date cannot be in the future.";
    } else if(jQuery('#logtype').val() == -100000) {
							  
        if(dateIncident > dateEntry) {
            return "Incident Date cannot be after Entry Date.";
        } else {
            
            // 04/11/2018 - PDN: Added the following comparison to Action Taken
            aDate = jQuery('#discipline_actiondate');
            if(aDate != undefined) {
                
                dsplit = aDate.val().split("/");
                mm = (dformat[0] == "MM") ? dsplit[0] : dsplit[1];
                dd = (dformat[1] == "DD") ? dsplit[1] : dsplit[0];
                yyyy = dsplit[2];
                var dateActionTaken = new Date(mm+"/"+dd+"/"+yyyy);

                if(dateIncident > dateActionTaken) {
                    return "Incident Date cannot be after "+aDate.closest('td').prev().text()+".";
                }
        	}
        }
    }
}

// Convert Seconds (integer) to Time (12 hr AM/PM) -- no seconds
function convSecondsToTime12(psec) {
    var hours    = Math.floor(psec / 3600);
    var minutes  = Math.floor((psec - (hours * 3600)) / 60);
    var meridiem = 'AM';
    if(hours > 12) {
        meridiem = 'PM';
        hours -= 12;
    }
    hours   = hours   < 10 ? '0'+hours : hours;
    minutes = minutes < 10 ? '0'+minutes : minutes;
    var strTime = hours+":"+minutes+" "+meridiem;
    return strTime;
}

// Convert Time (12 hr AM/PM) to Seconds (integer)
function convTime12ToSeconds(ptime) {
    var intSecs = 0;
    if(ptime !== undefined) {
        var hrs = ptime.substr(0,2);
        var min = ptime.substr(3,2);
        intSecs = hrs*3600 + min*60 + ((ptime.substr(6,2) === "PM" && hrs != "12") ? 43200 : 0);
    }
    return intSecs;
}

function copyTimeToBound(iTime) {
    $j('#discipline_incidenttime').val( convTime12ToSeconds(iTime.val()) );
}

/* Show/Hide Incident Date and/or Time based on selected log Type */
function toggleDisciplineInfo() {
    // FIRST TIME ONLY
    // The following id gets changed at the end of this function, so it exists only the first time the function is executed
    var lmExists = $j('#lm_discipline_incidenttime_disp').length;
    if(lmExists) {
        var trClass = $j('#entryLogDate').closest('tr').attr("class"); // <tr class="alt"> makes row gray -- get the class here so it can be assigned later
        //$j('#entryLogDate').closest('tr').after( $j('#tblIncidentInfo tbody').find('tr').first().addClass(trClass) ); //
        $j('#entryLogDate').closest('tr').after( $j('#lm_discipline_incidenttime_disp').closest('tr').addClass(trClass) ); //

        // Get id of the first of the remaining fields' (find label and save the field it's "for")
        var previd = 'entry';
        $j.each(logflds, function( index, logfld ) {
            if(logfld.id !== undefined) {

                // Check prefs to see if this log field should be shown (07/11/2017)
                var showfld = true;
                for(var sf = 0; sf < prefTPIncludeField.length; sf++) {
                    if(prefTPIncludeField[sf].id == logfld.id) {
                        showfld = prefTPIncludeField[sf].checked;
                        sf = prefTPIncludeField.length;
                    }
                }

                //if(logfld.id.indexOf("discipline_") === 0 && logfld.id !== "discipline_incidentdate") {
                const excluded_flds = "entry_date|entry_time|entry_author|logtype|subtype|subject|entry|discipline_incidentdate|";
                if(excluded_flds.indexOf(logfld.id+"|") < 0) {

                    // Build inputs on the p
                    if(logfld.sortorder !== 999999 && showfld) {   // hidden or admin indicated "don't show on Teacher Portal"
                        // Check the class of the row just before the one being inserted and assign the opposite class for the the new row
                        if($j('#'+previd).closest('tr').attr("class") !== "alt") {
                            $j(this).addClass("alt");
                        }

                        // Create this field entry row just after the prev field
                        var PSField = PSFields[0];  // PSFields array defined and populated in /wildcards/log_fields_script.txt
                        var PSField_found = false;
                        for(f=0;f<=PSFields.length && !PSField_found;f++) {
                            if(PSFields[f].id == logfld.id) {
                                PSField = PSFields[f];
                                PSFields[f].onpage = true;
                                PSFields[f].label = logfld.label;
                                
                                PSField_found = true;
                            }
                        }

                        /* Handle date differently, using hidden field with Datepicker as the "seed" field */
                        if(PSField.format === "date") {
                            
                            $j('div#datefield').find('input').attr({"id":logfld.id, "name":PSField.name, "type":"text"});   // change attributes on hidden date field
                            var datefield = $j('div#datefield').html();                                                     // copy the date field contents

                            $j('#'+previd).closest('tr').after(
                                '<tr title="'+logfld.label+'" '+(($j('#'+previd).closest('tr').attr("class") !== "alt") ? 'class="alt"' : '')+'> \
                                    <td class="bold"><label for="'+logfld.id+'">'+logfld.label+'</label></td> \
                                    <td>'+datefield+'</td></tr>' );
                                    
                            $j('div#datefield').find('input').attr({"id":"df", "name":"df"}); // reset hold field back to initial values
                            $j('#'+logfld.id).val(PSField.oldval);

                            //$j('#'+logfld.id).after("&nbsp;"+($j('#'+logfld.id).hasClass("unvalidated") ? "unvalidated" : "ok"));
                        }
                        else {
                            $j('#'+previd).closest('tr').after(
                                '<tr title="'+logfld.label+'" '+(($j('#'+previd).closest('tr').attr("class") !== "alt") ? 'class="alt"' : '')+'> \
                                    <td class="bold"><label for="'+logfld.id+'">'+logfld.label+'</label></td> \
                                    <td> \
                                        <input type="text" id="'+logfld.id+'" name="'+PSField.name+'" value="'+PSField.oldval+'"> \
                                    </td> \
                                </tr>' );
                        }
                        buildIncludedElement(logfld.id);

                        previd = logfld.id;
                    }
                }
            }
        });
        
        $j('#json-PSFields').val(JSON.stringify(PSFields)); // Repopulate the "hold" field with the settings that include the new fields
        $j('div#datefield').remove(); // remove the hidden date field so it doesn't interfere with processing

        // 12/20/2018 - PDN: enable the datepicker
        $j('#discipline_incidentdate').closest('tr').find('[class*="ui-datepicker"]').removeAttr("disabled"); //.css('border','2px solid red');

    }

    var newid = (lmExists ? 'lm_' : '') +'discipline_incidenttime_disp';
    if($j('#logtype').val() == -100000) {
        $j('#'+newid).closest('tr').show();
        $j('[id^="discipline_"]').closest('tr').show(); // show ALL Discipline fields
        $j('#entryLogDate').closest('tr').hide();
    }
    else {
        $j('#'+newid).closest('tr').hide();
        $j('[id^="discipline_"]').closest('tr').hide(); // hide ALL Discipline fields
        $j('#entryLogDate').closest('tr').show();
    }

    if(lmExists) {
        $j('input[id^="lm_"]').each(function() {
            $j(this).attr("id", $j(this).attr("id").replace("lm_","") );
            var objLabel = $j(this).closest('tr').find('td').first().find('label');
            objLabel.attr("for", objLabel.attr("for").replace("lm_",""));
        });
    }

    // Convert entered time to integer
    if($j('#discipline_incidenttime').val() > 0) {
        $j('#discipline_incidenttime_disp').val(convSecondsToTime12($j('#discipline_incidenttime').val()));
    } else if($j('#logtype').val() == -100000) {
        copyTimeToBound( $j('#discipline_incidenttime_disp') );
    }
}

function buildIncludedElement(elementid) {
    // Build included field label and field (input or popup)
	var included_fld = {};
    $j.each(logflds, function( index, logfld ) {
        if(logfld.id === elementid) {
            included_fld = logfld;
            return false;
        }
    });

    // Change label to the "custom" version (specified in District Setup > Log Entry Fields by admin)
    $j('label[for="'+elementid+'"]').html(included_fld.label);
    // If the entry type for the log field is a popup, replace the input with a select
    var hldval = "", hldname = "";
    if(included_fld.fldtype === "popup") {
        hldval  = $j('#'+elementid).val();
        hldname = $j('#'+elementid).attr("name");
        var loc_popup = '<select id="'+elementid+'" name="'+hldname+'">';
        var loc_options = included_fld.valuet2.split('\r\n');
        for(i = 0; i < loc_options.length; i++) {
            var option = loc_options[i].split(';')
            if(option[1] == undefined) option[1] = option[0];
            loc_popup += '<option value="'+option[0]+'" '+( ("~(gpv.frn)".substr(-2) === "-1" && option[2]==="*") ?'selected':'')+'>'+option[1]+'</option>';
        }
        loc_popup += '</select>';
        $j('#'+elementid).replaceWith( $j('<div/>').html(loc_popup).contents() );   // doing it this way avoids having to create an actual div on the page
        $j('#'+elementid).val(hldval);
    }
    else if(included_fld.fldtype === "textarea") {
        hldval  = $j('#'+elementid).val();
        hldname = $j('#'+elementid).attr("name");
        var loc_textarea = '<textarea cols="'+included_fld.width+'" rows="'+included_fld.height+'" id="'+elementid+'" name="'+hldname+'"></textarea>';
        $j('#'+elementid).replaceWith( $j('<div/>').html(loc_textarea).contents() );   // doing it this way avoids having to create an actual div on the page
        $j('#'+elementid).val(hldval);
    }
    else if(included_fld.fldtype === "checkbox") {
        hldval  = $j('#'+elementid).val();
        hldname = $j('#'+elementid).attr("name");
        var loc_checkbox = '<input type="hidden" name="'+hldname+'" value=""><input type="checkbox" id="'+elementid+'" name="'+hldname+'" value="1">';
        $j('#'+elementid).replaceWith( $j('<div/>').html(loc_checkbox).contents() );   // doing it this way avoids having to create an actual div on the page
        $j('#'+elementid+'').prop("checked", (hldval !== "" && hldval != 0));
    }
    else if(included_fld.fldtype === "radio") {
        hldval  = $j('#'+elementid).val();
        hldname = $j('#'+elementid).attr("name");
        var loc_radio = [];
        var loc_options = included_fld.valuet2.split('\r\n');
        var isChecked = false, toBeSet = "";
        for(var i = 0; i < 2; i++) {
            var option = loc_options[i].split(';')
            if(option[1] == undefined) option[1] = option[0];
            // NOTE: Creating multiple elements with the same ID is NOT best practice, but is how PS does it for the admin Log Entry, so I did the same here
            loc_radio[i] = '<input type="radio" id="'+elementid+'" name="'+hldname+'" value="'+option[0]+'">'+option[1]+'&nbsp; ';
            if(option[0] === hldval) {
                toBeSet = option[0];
                isChecked = true;
            } else if(!isChecked && option[2] === "*") {
                toBeSet = option[0];
            }
        }
        var loc_radios = loc_radio[0]+loc_radio[1];
        $j('#'+elementid).replaceWith( $j('<div/>').html(loc_radios).contents() );   // doing it this way avoids having to create an actual div on the page
        $j('input[id="'+elementid+'"][value="'+toBeSet+'"]').prop("checked",true);
    }
    else if(included_fld.fldtype === "static") {
        hldval  = $j('#'+elementid).val();
        var loc_label = '<span id="'+elementid+'">'+hldval+'</span>';
        $j('#'+elementid).replaceWith( $j('<div/>').html(loc_label).contents() );   // doing it this way avoids having to create an actual div on the page
    }
    else {
        $j('#'+elementid).attr("size",included_fld.width);
    }
}

$j(document).ready(function() {
    // Get the stored prefs that indicate if incident fields should be displayed on the Teacher Portal (07/11/2017)
    var inParams = $j('#pref-TP_include_fields').val().trim();
    if(inParams.length) {
        prefTPIncludeField = JSON.parse(inParams);
    }
    /*
    try {
        prefTPIncludeField = JSON.parse(inParams);
    }
    catch (e) {
        prefTPIncludeField = null;
    }
    */

    $j('#logtype').change( function() { toggleDisciplineInfo(); });
    // wait shortly to make sure all is on the page
    setTimeout(toggleDisciplineInfo,100);

    $j('button[type="submit"]').before( $j('#discipline_incidenttime') );
});

</script>
